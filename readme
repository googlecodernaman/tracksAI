
# 🚆 Railway Traffic Decision-Support System

## 📌 Overview

Indian Railways currently relies on **manual decision-making** by traffic controllers to manage train precedence, crossings, and scheduling. As traffic grows, manual operations face limitations: increasing congestion, delays, and inefficient use of track capacity.

This project aims to build an **AI + Optimization powered Decision-Support System** to assist section controllers. The system generates **real-time recommendations** for train scheduling, rerouting, and platform allocation—improving throughput, punctuality, and safety.

---

## 🎯 Problem Statement (Simplified)

* Railways have limited **tracks, signals, and platforms** shared by many trains (passenger, freight, express, special).
* Controllers must decide **which train goes first, which waits, and where to cross**, under numerous constraints:

  * Safety rules
  * Track capacity
  * Platform availability
  * Train priorities (e.g., express > freight)
* This is a **large-scale optimization problem** with too many possibilities for human intuition alone.
* Current manual system = delays, bottlenecks, inefficient utilization.

---

## ✅ Expected Solution (from SIH brief)

An **intelligent decision-support tool** that:

1. Suggests optimal train precedence and crossings in real time.
2. Uses AI/Operations Research to maximize throughput & minimize delays.
3. Quickly re-optimizes during disruptions (breakdowns, weather).
4. Provides **visual dashboards** with delays, station maps, and KPIs.
5. Integrates with existing railway control systems via secure APIs.

---

## 🛠️ Our Approach

### 🔹 High-Level Workflow

1. **Data Collection**

   * Train schedules (NTES, Datameet datasets).
   * Real-time train running status (via **Indian Railways MCP API**).
   * Section metadata: track length, junctions, gradients, signalling.

2. **State Store**

   * Central database (PostgreSQL/TimescaleDB) for live train positions, delays, section status.

3. **Decision Engine**

   * **Core algorithm**: Backtracking/Constraint-Satisfaction with pruning.
   * **AI layer**: ML models to account for disruptions (historical delay prediction, weather, breakdown probabilities).
   * Produces optimized train order, crossing plan, and rerouting suggestions.

4. **Simulation Mode**

   * Discrete-event simulator (Python) to **compare baseline vs optimized** schedules.
   * Metrics: throughput, average delay reduction, utilization.

5. **Visualization & UI**

   * Web-based dashboard (FastAPI + lightweight JS/Plotly).
   * Features:

     * Station map + live train icons.
     * Delays highlighted in colors.
     * Single-screen recommendations for operator.
     * “What-if” scenario testing.

---

## 🧑‍💻 Tech Stack

| Component      | Technology                                   | Reason                                                |
| -------------- | -------------------------------------------- | ----------------------------------------------------- |
| Backend APIs   | **FastAPI (Python)**                         | Lightweight, async, great for real-time REST APIs     |
| Database       | **PostgreSQL + TimescaleDB**                 | Handles historical + real-time time-series train data |
| Optimization   | **OR-Tools / PuLP (Python)**                 | Solvers for combinatorial optimization                |
| AI/ML          | **XGBoost / PyTorch**                        | Delay prediction, disruption modeling                 |
| Real-Time Data | **Indian Railways MCP API**                  | Live train and station info                           |
| Caching        | **Redis**                                    | Fast updates for real-time status                     |
| Visualization  | **Plotly/D3.js**                             | Interactive charts and maps                           |
| Frontend       | **Lightweight Web UI** (HTML/JS + Bootstrap) | Minimal, works on railway control room PCs            |
| Simulation     | **Discrete-event simulator in Python**       | Test baseline vs optimized outcomes                   |

---

## 📊 Key Features

* **Dashboard View**

  * Station map with train movements.
  * Live delays highlighted (red/yellow).
  * Recommendations (text + visuals).
* **Scenario Analysis**

  * Try alternative precedence orders.
  * Predict impact on throughput.
* **Real-Time Optimization**

  * Updates recommendations every few seconds.
  * Re-optimizes under delays or disruptions.
* **Integration Ready**

  * Exposes APIs to integrate with signalling & TMS.

---

## 🔄 Workflow Diagram (Conceptual)

```
[ MCP API / Schedules / Metadata ] 
            ↓
       Data Collector
            ↓
       [ Database ]
            ↓
   Decision Engine (OR-Tools + AI)
            ↓
    [ Recommendations ]
            ↓
   Web Dashboard for Controller
```

---

## 📈 Validation Plan

1. **Use Historical Delay Datasets**

   * Run baseline vs optimized schedule.
   * Show throughput/delay improvements.

2. **Use MCP Real-Time Data**

   * Feed live updates to the system.
   * Run side-by-side simulation to show real improvements.

3. **Metrics to Track**

   * 🚆 Section throughput ↑ (trains handled/hour).
   * ⏱️ Average train delay ↓.
   * 📊 Platform utilization ↑.

Example Claim (Prototype Level):

> *“In Section X, throughput improved by 18% and average delays reduced by 55% when controller followed system recommendations.”*

---

## 🔐 Best Practices in Coding

* **Object-Oriented Design**: Train, Section, Controller as classes.
* **Modular Architecture**: Separate modules for data fetch, optimizer, dashboard.
* **Error Handling**: Robust retries for API calls.
* **Clean Code**: PEP8 guidelines, comments, logging.
* **Version Control**: Git with feature branches.
* **Testing**: Unit tests + simulation-based testing.

---

## 🚀 How to Run

1. Clone repo.
2. Install dependencies:

   ```bash
   pip install -r requirements.txt
   ```
3. Run MCP API server locally (optional for real-time).
4. Start backend:

   ```bash
   uvicorn main:app --reload
   ```
5. Access dashboard at:

   ```
   http://localhost:8000/dashboard
   ```

---

## 📌 Future Scope

* Integrate with real signalling systems.
* Expand to multi-section optimization.
* Incorporate reinforcement learning for adaptive decision-making.
* Mobile/Tablet interface for roving controllers.

---

## 👥 Team Roles

* **AI/ML Developer** → Disruption modeling, delay prediction.
* **Optimization Engineer** → OR algorithms, solvers.
* **Backend Engineer** → APIs, database, data adapters.
* **UI Developer** → Dashboard visuals.
* **Systems Integrator** → MCP API, railway systems compatibility.

---
